from config import BANNED_USERS, CLEAN_MINS
from pyrogram import filters
from pyrogram.errors import MessageNotModified
from pyrogram.types import InlineKeyboardMarkup, Message
from Bgt import app
from Bgt.utils.database import (add_nonadmin_chat, cleanmode_off, cleanmode_on, commanddelete_off, commanddelete_on,
            get_aud_bit_name, get_playmode, get_playtype, get_vid_bit_name, is_cleanmode_on, is_commanddelete_on,
            is_nonadmin_chat, remove_nonadmin_chat, save_audio_bitrate, save_video_bitrate, set_playmode, set_playtype)
from Bgt.utils.inline.settings import (audio_quality_markup, playmode_users_markup,
                     setting_markup, video_quality_markup, cleanmode_settings_markup)
from Bgt.utils.decorators import ActualAdminCB, AdminRightsCheck



@app.on_message(filters.command(["settings", "setting"]) & filters.group & ~BANNED_USERS)
@AdminRightsCheck
async def settings_mar(client, message: Message):
    try:
        await message.delete()
    except:
        pass
    buttons = setting_markup()
    await message.reply_text(
        "‚öôÔ∏è **·¥ç·¥ús…™·¥Ñ  ô·¥è·¥õ s·¥á·¥õ·¥õ…™…¥…¢s**\n\nüñá **…¢ Ä·¥è·¥ú·¥ò:** {0}\nüîñ **…¢ Ä·¥è·¥ú·¥ò …™·¥Ö:** `{1}`\n\nüå∏ **·¥Ñ ú·¥è·¥ès·¥á ·¥õ ú·¥á “ì·¥ú…¥·¥Ñ·¥õ…™·¥è…¥  ô·¥ú·¥õ·¥õ·¥è…¥s “ì Ä·¥è·¥ç  ô·¥á ü·¥è·¥° ·¥° ú…™·¥Ñ ú  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥á·¥Ö…™·¥õ ·¥è Ä ·¥Ñ ú·¥Ä…¥…¢·¥á**".format(message.chat.title, message.chat.id),
        reply_markup=InlineKeyboardMarkup(buttons),
    )


@app.on_callback_query(filters.regex(r"settings_helper") & ~BANNED_USERS)
async def settings_cb(client, CallbackQuery):
    try:
        await CallbackQuery.answer("…¢·¥á·¥õ·¥õ…™…¥…¢  ô·¥Ä·¥Ñ·¥ã ")
    except:
        pass
    buttons = setting_markup()
    return await CallbackQuery.edit_message_text(
        "‚öôÔ∏è **·¥ç·¥ús…™·¥Ñ  ô·¥è·¥õ s·¥á·¥õ·¥õ…™…¥…¢s**\n\nüñá **…¢ Ä·¥è·¥ú·¥ò:** {0}\nüîñ **…¢ Ä·¥è·¥ú·¥ò …™·¥Ö:** `{1}`\n\nüå∏ **·¥Ñ ú·¥è·¥ès·¥á ·¥õ ú·¥á “ì·¥ú…¥·¥Ñ·¥õ…™·¥è…¥  ô·¥ú·¥õ·¥õ·¥è…¥s “ì Ä·¥è·¥ç  ô·¥á ü·¥è·¥° ·¥° ú…™·¥Ñ ú  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥á·¥Ö…™·¥õ ·¥è Ä ·¥Ñ ú·¥Ä…¥…¢·¥á**".format(CallbackQuery.message.chat.title, CallbackQuery.message.chat.id),
        reply_markup=InlineKeyboardMarkup(buttons),
    )


async def gen_buttons_aud(aud):
    if aud == "High":
        buttons = audio_quality_markup(high=True)
    elif aud == "Medium":
        buttons = audio_quality_markup(medium=True)
    elif aud == "Low":
        buttons = audio_quality_markup(low=True)
    return buttons


async def gen_buttons_vid(aud):
    if aud == "High":
        buttons = video_quality_markup(high=True)
    elif aud == "Medium":
        buttons = video_quality_markup(medium=True)
    elif aud == "Low":
        buttons = video_quality_markup(low=True)
    return buttons


@app.on_callback_query(filters.regex(pattern=r"^(SEARCHANSWER|PLAYMODEANSWER|PLAYTYPEANSWER|AUTHANSWER|CMANSWER|COMMANDANSWER|CM|AQ|VQ|PM|)$") & ~BANNED_USERS)
async def without_Admin_rights(client, CallbackQuery):
    command = CallbackQuery.matches[0].group(1)
    if command == "SEARCHANSWER":
        try:
            return await CallbackQuery.answer("1) ·¥Ö…™ Ä·¥á·¥Ñ·¥õ: ·¥ò ü·¥Ä ès s·¥á·¥Ä Ä·¥Ñ ú «´·¥ú·¥á Ä…™·¥ás ·¥Ö…™ Ä·¥á·¥Ñ·¥õ ü è. ·¥ús·¥á -·¥† ·¥õ·¥è ·¥ò ü·¥Ä è ·¥†…™·¥Ö·¥á·¥ès …™…¥ ·¥Ö…™ Ä·¥á·¥Ñ·¥õ ·¥ç·¥è·¥Ö·¥á.\n\n2) …™…¥ ü…™…¥·¥á:  Ä·¥á·¥õ·¥ú Ä…¥s …™…¥ ü…™…¥·¥á ·¥ç·¥Ä Ä·¥ã·¥ú·¥ò  ô·¥ú·¥õ·¥õ·¥è…¥s Íú∞·¥è Ä ·¥Ñ ú·¥è·¥ès…™…¥…¢  ô·¥á·¥õ·¥°·¥á·¥á…¥ ·¥†…™·¥Ö·¥á·¥è & ·¥Ä·¥ú·¥Ö…™·¥è.", show_alert=True)
        except:
            return
    elif command == "PLAYMODEANSWER":
        try:
            return await CallbackQuery.answer("1) …¢ Ä·¥è·¥ú·¥ò: ·¥ò ü·¥Ä ès ·¥ç·¥ús…™·¥Ñ …™…¥ ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò ·¥° ú·¥á Ä·¥á ·¥õ ú·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™s …¢…™·¥†·¥á…¥.\n\n2) ·¥Ñ ú·¥Ä…¥…¥·¥á ü: ·¥ò ü·¥Ä ès ·¥ç·¥ús…™·¥Ñ …™…¥ ·¥õ ú·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ. s·¥á·¥õ ·¥Ñ ú·¥Ä…¥…¥·¥á ü …™·¥Ö ·¥†…™·¥Ä /channelplay", show_alert=True)
        except:
            return
    elif command == "PLAYTYPEANSWER":
        try:
            return await CallbackQuery.answer("1) ·¥á·¥†·¥á Ä è·¥è…¥·¥á: ·¥Ä…¥ è·¥è…¥·¥á ·¥ò Ä·¥ás·¥á…¥·¥õ …™…¥ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥Ä…¥ ·¥ò ü·¥Ä è ·¥ç·¥ús…™·¥Ñ  ú·¥á Ä·¥á.\n\n2) ·¥Ä·¥Ö·¥ç…™…¥ ·¥è…¥ ü è: ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥s ·¥Ñ·¥Ä…¥ ·¥ò ü·¥Ä è ·¥õ ú·¥á ·¥ç·¥ús…™·¥Ñ …™…¥ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò.", show_alert=True)
        except:
            return
    elif command == "AUTHANSWER":
        try:
            return await CallbackQuery.answer("üë• ·¥á·¥†·¥á Ä è·¥è…¥·¥á: ·¥Ä…¥ è·¥è…¥·¥á ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös(s·¥ã…™·¥ò, ·¥ò·¥Ä·¥ús·¥á,  Ä·¥ás·¥ú·¥ç·¥á ·¥á·¥õ·¥Ñ) ·¥ò Ä·¥ás·¥á…¥·¥õ …™…¥ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò.\n\nüôç ·¥Ä·¥Ö·¥ç…™…¥ ·¥è…¥ ü è: ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥s ·¥Ä…¥·¥Ö ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö ·¥ús·¥á Äs ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös.", show_alert=True)
        except:
            return
    elif command == "CMANSWER":
        try:
            return await CallbackQuery.answer("·¥° ú·¥á…¥ ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö,  ô·¥è·¥õ ·¥°…™ ü ü ·¥Ö·¥á ü·¥á·¥õ·¥á …™·¥õs ·¥ç·¥áss·¥Ä…¢·¥á ·¥ÄÍú∞·¥õ·¥á Ä {0} ·¥õ·¥è ·¥ç·¥Ä·¥ã·¥á  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õ ·¥Ñ ü·¥á·¥Ä…¥ ·¥Ä…¥·¥Ö ·¥Ñ ü·¥á·¥Ä Ä.".format(CLEAN_MINS), show_alert=True)
        except:
            return
    elif command == "COMMANDANSWER":
        try:
            return await CallbackQuery.answer("·¥° ú·¥á…¥ ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö,  ô·¥è·¥õ ·¥°…™ ü ü ·¥Ö·¥á ü·¥á·¥õ·¥á …™·¥õs ·¥áx·¥á·¥Ñ·¥ú·¥õ·¥á·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös (/play, /pause, /shuffle, /stop ·¥á·¥õ·¥Ñ) …™·¥ç·¥ç·¥á·¥Ö…™·¥Ä·¥õ·¥á ü è.\n\n ô·¥è·¥õ ·¥°…™ ü ü  ô·¥á  Ä·¥á«´·¥ú…™ Ä…™…¥…¢ ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥ç·¥áss·¥Ä…¢·¥ás ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õ Íú∞·¥è Ä ·¥õ ú…™s ·¥õ·¥è ·¥°·¥è Ä·¥ã ·¥ò Ä·¥è·¥ò·¥á Ä ü è.", show_alert=True)
        except:
            return
    elif command == "CM":
        try:
            await CallbackQuery.answer("…¢·¥á·¥õ·¥õ…™…¥…¢ ·¥Ñ ü·¥á·¥Ä…¥ ·¥ç·¥è·¥Ö·¥á ·¥ò·¥Ä…¥·¥á ü ", show_alert=True)
        except:
            pass
        sta = None
        cle = None
        if await is_cleanmode_on(CallbackQuery.message.chat.id):
            cle = True
        if await is_commanddelete_on(CallbackQuery.message.chat.id):
            sta = True
        buttons = cleanmode_settings_markup(status=cle, dels=sta)
    elif command == "AQ":
        try:
            await CallbackQuery.answer("…¢·¥á·¥õ·¥õ…™…¥…¢ ·¥Ä·¥ú·¥Ö…™·¥è «´·¥ú·¥Ä ü…™·¥õ è ·¥ò·¥Ä…¥·¥á ü ", show_alert=True)
        except:
            pass
        aud = await get_aud_bit_name(CallbackQuery.message.chat.id)
        buttons = await gen_buttons_aud(aud)
    elif command == "VQ":
        try:
            await CallbackQuery.answer("…¢·¥á·¥õ·¥õ…™…¥…¢ ·¥†…™·¥Ö·¥á·¥è «´·¥ú·¥Ä ü…™·¥õ è ·¥ò·¥Ä…¥·¥á ü ", show_alert=True)
        except:
            pass
        aud = await get_vid_bit_name(CallbackQuery.message.chat.id)
        buttons = await gen_buttons_vid(aud)
    elif command == "PM":
        try:
            await CallbackQuery.answer("…¢·¥á·¥õ·¥õ…™…¥…¢ ·¥ò ü·¥Ä è ·¥ç·¥è·¥Ö·¥á ·¥ò·¥Ä…¥·¥á ü ", show_alert=True)
        except:
            pass
        playmode = await get_playmode(CallbackQuery.message.chat.id)
        Direct = True if playmode == "Direct" else None
        is_non_admin = await is_nonadmin_chat(CallbackQuery.message.chat.id)
        Group = None if is_non_admin else True
        playty = await get_playtype(CallbackQuery.message.chat.id)
        Playtype = None if playty == "Everyone" else True
        buttons = playmode_users_markup(Direct, Group, Playtype)
    
    try:
        return await CallbackQuery.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(buttons))
    except MessageNotModified:
        return


@app.on_callback_query(filters.regex(pattern=r"^(LQA|MQA|HQA|LQV|MQV|HQV)$") & ~BANNED_USERS)
@ActualAdminCB
async def aud_vid_cb(client, CallbackQuery):
    command = CallbackQuery.matches[0].group(1)
    try:
        await CallbackQuery.answer("…¢·¥á·¥õ·¥õ…™…¥…¢ ·¥ú·¥ò ·¥Ñ ú·¥Ä…¥…¢·¥ás ", show_alert=True)
    except:
        pass
    if command == "LQA":
        await save_audio_bitrate(CallbackQuery.message.chat.id, "Low")
        buttons = audio_quality_markup(low=True)
    elif command == "MQA":
        await save_audio_bitrate(CallbackQuery.message.chat.id, "Medium")
        buttons = audio_quality_markup(medium=True)
    elif command == "HQA":
        await save_audio_bitrate(CallbackQuery.message.chat.id, "High")
        buttons = audio_quality_markup(high=True)
    elif command == "LQV":
        await save_video_bitrate(CallbackQuery.message.chat.id, "Low")
        buttons = video_quality_markup(low=True)
    elif command == "MQV":
        await save_video_bitrate(CallbackQuery.message.chat.id, "Medium")
        buttons = video_quality_markup(medium=True)
    elif command == "HQV":
        await save_video_bitrate(CallbackQuery.message.chat.id, "High")
        buttons = video_quality_markup(high=True)
    try:
        return await CallbackQuery.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(buttons))
    except MessageNotModified:
        return


@app.on_callback_query(filters.regex(pattern=r"^(|MODECHANGE|CHANNELMODECHANGE|PLAYTYPECHANGE)$") & ~BANNED_USERS)
@ActualAdminCB
async def playmode_ans(client, CallbackQuery):
    command = CallbackQuery.matches[0].group(1)
    if command == "CHANNELMODECHANGE":
        is_non_admin = await is_nonadmin_chat(CallbackQuery.message.chat.id)
        if is_non_admin:
            await remove_nonadmin_chat(CallbackQuery.message.chat.id)
            Group = True
        else:
            await add_nonadmin_chat(CallbackQuery.message.chat.id)
            Group = None
        playmode = await get_playmode(CallbackQuery.message.chat.id)
        if playmode == "Direct":
            Direct = True
        else:
            Direct = None
        playty = await get_playtype(CallbackQuery.message.chat.id)
        if playty == "Everyone":
            Playtype = None
        else:
            Playtype = True
        buttons = playmode_users_markup(Direct, Group, Playtype)
    elif command == "MODECHANGE":
        try:
            await CallbackQuery.answer("…¢·¥á·¥õ·¥õ…™…¥…¢ ·¥ú·¥ò ·¥Ñ ú·¥Ä…¥…¢·¥ás ", show_alert=True)
        except:
            pass
        playmode = await get_playmode(CallbackQuery.message.chat.id)
        if playmode == "Direct":
            await set_playmode(CallbackQuery.message.chat.id, "Inline")
            Direct = None
        else:
            await set_playmode(CallbackQuery.message.chat.id, "Direct")
            Direct = True
        is_non_admin = await is_nonadmin_chat(CallbackQuery.message.chat.id)
        if is_non_admin:
            Group = None
        else:
            Group = True
        playty = await get_playtype(CallbackQuery.message.chat.id)
        if playty == "Everyone":
            Playtype = False
        else:
            Playtype = True
        buttons = playmode_users_markup(Direct, Group, Playtype)
    elif command == "PLAYTYPECHANGE":
        try:
            await CallbackQuery.answer("…¢·¥á·¥õ·¥õ…™…¥…¢ ·¥ú·¥ò ·¥Ñ ú·¥Ä…¥…¢·¥ás ", show_alert=True)
        except:
            pass
        playty = await get_playtype(CallbackQuery.message.chat.id)
        if playty == "Everyone":
            await set_playtype(CallbackQuery.message.chat.id, "Admin")
            Playtype = False
        else:
            await set_playtype(CallbackQuery.message.chat.id, "Everyone")
            Playtype = True
        playmode = await get_playmode(CallbackQuery.message.chat.id)
        if playmode == "Direct":
            Direct = True
        else:
            Direct = None
        is_non_admin = await is_nonadmin_chat(CallbackQuery.message.chat.id)
        if is_non_admin:
            Group = None
        else:
            Group = True
        buttons = playmode_users_markup(Direct, Group, Playtype)
    try:
        return await CallbackQuery.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(buttons))
    except MessageNotModified:
        return


@app.on_callback_query(filters.regex(pattern=r"^(CLEANMODE|COMMANDELMODE)$") & ~BANNED_USERS)
@ActualAdminCB
async def cleanmode_mark(client, CallbackQuery):
    command = CallbackQuery.matches[0].group(1)
    try:
        await CallbackQuery.answer("…¢·¥á·¥õ·¥õ…™…¥…¢ ·¥ú·¥ò ·¥Ñ ú·¥Ä…¥…¢·¥ás ", show_alert=True)
    except:
        pass

    if command == "CLEANMODE":
        sta = None
        if await is_commanddelete_on(CallbackQuery.message.chat.id):
            sta = True
        cle = None
        if await is_cleanmode_on(CallbackQuery.message.chat.id):
            await cleanmode_off(CallbackQuery.message.chat.id)
        else:
            await cleanmode_on(CallbackQuery.message.chat.id)
            cle = True
        buttons = cleanmode_settings_markup(status=cle, dels=sta)
        return await CallbackQuery.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(buttons))

    elif command == "COMMANDELMODE":
        cle = None
        sta = None
        if await is_cleanmode_on(CallbackQuery.message.chat.id):
            cle = True
        if await is_commanddelete_on(CallbackQuery.message.chat.id):
            await commanddelete_off(CallbackQuery.message.chat.id)
        else:
            await commanddelete_on(CallbackQuery.message.chat.id)
            sta = True
        buttons = cleanmode_settings_markup(status=cle, dels=sta)

    try:
        return await CallbackQuery.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(buttons))
    except MessageNotModified:
        return
