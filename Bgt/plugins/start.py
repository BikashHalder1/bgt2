import asyncio
import config
from config import BANNED_USERS
from sys import version as pyver
from pyrogram import filters, __version__ as pyrover
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from pyrogram.enums import ParseMode
from youtubesearchpython.__future__ import VideosSearch
from Bgt.platforms import YouTube
from Bgt import app, HELPABLE, __Version__
from Bgt.utils.eqline import page_load
from Bgt.plugins.playlist import del_plist_msg
from Bgt.utils.database import add_served_user, get_userss, is_on_off
from Bgt.utils.inline import private_panel


loop = asyncio.get_running_loop()


@app.on_message(filters.command(["start", "help"]) & ~BANNED_USERS & ~filters.group & ~filters.forwarded)
async def private_start(app, message : Message):
    user_id = message.from_user.id
    await add_served_user(user_id)
    if len(message.text.split()) > 1:
        name = message.text.split(None, 1)[1]
        if name[0:4] == "help":
            buttons = page_load(0, HELPABLE, "help")
            return await message.reply_photo(
                photo=config.START_IMG,
                caption="·¥Ñ ú·¥è·¥ès·¥á ·¥õ ú·¥á ·¥Ñ·¥Ä·¥õ·¥á…¢·¥è Ä è “ì·¥è Ä ·¥° ú…™·¥Ñ ú  è·¥è·¥ú ·¥°·¥Ä…¥…¥·¥Ä …¢·¥á·¥õ  ú·¥á ü·¥©.\n·¥Äs·¥ã  è·¥è·¥ú Ä ·¥Ö·¥è·¥ú ô·¥õs ·¥Ä·¥õ @{}\n\n‡πè ·¥Ä ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ñ·¥Ä…¥  ô·¥á ·¥ús·¥á·¥Ö ·¥°…™·¥õ ú : `/`".format(config.SUPPORT_HEHE),
                reply_markup=InlineKeyboardMarkup(buttons)
            )
        if name[0:4] == "song":
            return await message.reply_text("**·¥ús·¥Ä…¢·¥á:**\n/song [·¥ç·¥ús…™·¥Ñ …¥·¥Ä·¥ç·¥á] ·¥è Ä [ è·¥è·¥ú·¥õ·¥ú ô·¥á  ü…™…¥·¥ã]")
        if name[0:3] == "sta":
            m = await message.reply_text(f"> …¢·¥á·¥õ·¥õ…™…¥…¢  è·¥è·¥ú Ä ·¥©·¥á Äs·¥è…¥·¥Ä ü s·¥õ·¥Ä·¥õs “ì Ä·¥è·¥ç {app.mention} s·¥á Ä·¥†·¥á Ä")
            stats = await get_userss(user_id)
            tot = len(stats)
            if not stats:
                await asyncio.sleep(1)
                return await m.edit("…¥·¥è ·¥ús·¥á Ä s·¥õ·¥Ä·¥õs Íú∞·¥è·¥ú…¥·¥Ö")
            def get_stats():
                msg = ""
                limit = 0
                results = {}
                for i in stats:
                    top_list = stats[i]["spot"]
                    results[str(i)] = top_list
                    list_arranged = dict(
                        sorted(
                            results.items(),
                            key=lambda item: item[1],
                            reverse=True,
                        )
                    )
                if not results:
                    return m.edit("…¥·¥è ·¥ús·¥á Ä s·¥õ·¥Ä·¥õs Íú∞·¥è·¥ú…¥·¥Ö")
                tota = 0
                videoid = None
                for vidid, count in list_arranged.items():
                    tota += count
                    if limit == 10:
                        continue
                    if limit == 0:
                        videoid = vidid
                    limit += 1
                    details = stats.get(vidid)
                    title = (details["title"][:35]).title()
                    if vidid == "telegram":
                        msg += f"üîó [·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥ç·¥á·¥Ö…™·¥Ä] ** ·¥© ü·¥Ä è·¥á·¥Ö {count} ·¥õ…™·¥ç·¥ás**\n\n"
                    else:
                        msg += f"üîó [{title}](https://www.youtube.com/watch?v={vidid}) ** ·¥© ü·¥Ä è·¥á·¥Ö {count} ·¥õ…™·¥ç·¥ás**\n\n"
                msg = "…¢ Ä·¥á·¥á·¥õ…™…¥…¢s !  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥ò ü·¥Ä è·¥á·¥Ö **{0}** ·¥õ Ä·¥Ä·¥Ñ·¥ãs ·¥õ…™ ü ü …¥·¥è·¥° ·¥°…™·¥õ ú ·¥Ä ·¥° ú·¥è·¥ò·¥ò…™…¥…¢ ·¥Ñ·¥è·¥ú…¥·¥õ ·¥èÍú∞ **{1}** ·¥õ…™·¥ç·¥ás\n\n·¥õ·¥è·¥ò **{2}** ·¥ò ü·¥Ä è·¥á·¥Ö  ô è  è·¥è·¥ú :\n\n".format(tot, tota, limit) + msg
                return videoid, msg
            try:
                videoid, msg = await loop.run_in_executor(None, get_stats)
            except Exception as e:
                print(e)
                return
            thumbnail = await YouTube.thumbnail(videoid, True)
            await m.delete()
            await message.reply_photo(photo=thumbnail, caption=msg)
            return
        if name[0:3] == "del":
            await del_plist_msg(client=app, message=message)
        if name[0:4] == "rule":
            XT = f"""
 Ä·¥ú ü·¥ás ·¥è“ì ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò :-

‚ä±  Ä·¥ás·¥ò·¥á·¥Ñ·¥õ ·¥á·¥Ä·¥Ñ ú ·¥Ä…¥·¥Ö ·¥á·¥†·¥á Ä è·¥è…¥·¥á 
‚ä± …¥·¥è ·¥Ö·¥ç / ·¥ò·¥ç ·¥°…™·¥õ ú·¥è·¥ú·¥õ ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥ 
‚ä± ùü∑ùüæ+ ·¥Ñ·¥è…¥·¥õ·¥á…¥·¥õ - ·¥Ö…™ Ä·¥á·¥Ñ·¥õ  ô·¥Ä…¥
‚ä± ·¥Ä…¥ è ·¥ò Ä·¥è ô ü·¥á·¥ç - @admins
‚ä± ·¥ús·¥á  ú…™…¥·¥Ö…™ / ·¥á…¥…¢ ü…™s ú
‚ä± …¥·¥è ·¥ò Ä·¥è·¥ç·¥è·¥õ…™·¥è…¥ 
‚ä± …¥·¥è ·¥ò·¥è ü…™·¥õ…™·¥Ñ·¥Ä ü ·¥Ö…™s·¥Ñ·¥úss…™·¥è…¥
‚ä± …¥·¥è  ô·¥è·¥Ö è s ú·¥Ä·¥ç…™…¥…¢ 
‚ä± …™“ì  è·¥è·¥ú ·¥Ä Ä·¥á ·¥è…¥ ·¥†·¥Ñ - ·¥õ ú·¥á…¥  è·¥è·¥ú ·¥Ä Ä·¥á  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö ·¥õ·¥è ·¥ã·¥á·¥á·¥ò ·¥Ñ·¥è…¥·¥õ Ä·¥è ü ·¥è…¥  è·¥è·¥ú Ä ·¥°·¥è Ä·¥Ös
‚ä± “ì ü…™ Ä·¥õ…™…¥…¢ ·¥è…¥ ü è ·¥°…™·¥õ ú …™·¥Ö·¥á…¥·¥õ…™“ì…™·¥á·¥Ö ·¥è…¥·¥á
‚ä± ·¥Ä ô·¥ús…™…¥…¢ - ·¥Ö…™ Ä·¥á·¥Ñ·¥õ  ô·¥Ä…¥ ( ·¥°…™·¥õ ú·¥è·¥ú·¥õ ·¥°·¥Ä Ä…¥ )
‚ä± ·¥Ö…™s Ä·¥ás·¥ò·¥á·¥Ñ·¥õ ·¥è“ì ·¥Ä…¥ è ·¥Ä·¥Ö·¥ç…™…¥ - ·¥Ö…™ Ä·¥á·¥Ñ·¥õ  ô·¥Ä…¥ 
‚ä± ·¥õ·¥è ·¥ã…¥·¥è·¥° ·¥ç·¥è Ä·¥á ·¥Ä ô·¥è·¥ú·¥õ  ú·¥á Ä·¥á  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥Ä…¥ è ·¥Ä·¥Ö·¥ç…™…¥

·¥õ ú·¥Ä…¥·¥ãs “ì·¥è Ä ·¥ä·¥è…™…¥…™…¥…¢ ·¥ús ‚ú®"""
            await message.reply_text(text=XT)
        if name[0:3] == "inf":
            m = await message.reply_text("üîé **“ì·¥á·¥õ·¥Ñ ú…™…¥…¢ …™…¥“ì·¥è**")
            query = name.replace("info_", "", 1)
            query = f"https://www.youtube.com/watch?v={query}"
            results = VideosSearch(query, limit=1)
            for result in (await results.next())["result"]:
                title = result["title"]
                duration = result["duration"]
                views = result["viewCount"]["short"]
                thumbnail = result["thumbnails"][0]["url"].split("?")[0]
                channellink = result["channel"]["link"]
                channel = result["channel"]["name"]
                link = result["link"]
                published = result["publishedTime"]
            searched_text = f"""
>> <b>·¥õ Ä·¥Ä·¥Ñ·¥ã …™…¥“ì·¥è Ä…¥·¥Ä·¥õ…™·¥è…¥</b>

‚ä± <b>T…™·¥õ ü·¥á:</b> {title}
‚è≥ <b>D·¥ú Ä·¥Ä·¥õ…™·¥è…¥:</b> {duration} ·¥ç…™…¥·¥ú·¥õ·¥ás
üëÄ <b>·¥†…™·¥á·¥°s:</b> <code>{views}</code>
‚ä± <b>·¥©·¥ú ô ü…™s ú·¥á·¥Ö ·¥è…¥:</b> {published}
üé• <b>·¥Ñ ú·¥Ä…¥…¥·¥á ü:</b> {channel}
üìé <b>·¥Ñ ú·¥Ä…¥…¥·¥á ü  ü…™…¥·¥ã:</b> <a href="{channellink}">·¥†…™s…™·¥õ ·¥Ñ ú·¥Ä…¥…¥·¥á ü</a>
üîó <b> ü…™…¥·¥ã:</b> <a href="{link}">·¥°·¥Ä·¥õ·¥Ñ ú ·¥è…¥  è·¥è·¥ú·¥õ·¥ú ô·¥á</a>

‚ö° s·¥á·¥Ä Ä·¥Ñ ú ·¥©·¥è·¥°·¥á Ä·¥á·¥Ö  ô è {app.mention}
"""
            key = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text=" è·¥è·¥ú·¥õ·¥ú ô·¥á", url=link),
                        InlineKeyboardButton(text="·¥Ñ ü·¥ès·¥á", callback_data="close")
                    ],
                ]
            )
            await m.delete()
            await app.send_photo(
                message.chat.id,
                photo=thumbnail,
                caption=searched_text,
                parse_mode=ParseMode.HTML,
                reply_markup=key,
            )
            if await is_on_off(2):
                sender_id = message.from_user.id
                sender_name = message.from_user.mention
                return await app.send_message(
                    config.LOG_GROUP_ID,
                    f"{message.from_user.mention} ·¥ä·¥ús·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö  ô·¥è·¥õ ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã <b>·¥õ Ä·¥Ä·¥Ñ·¥ã …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥</b>\n\n<b>·¥ús·¥á Ä …™·¥Ö:</b> {sender_id}\n<b>·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á:</b> {sender_name}",
                )
    else:
        out = private_panel()
        image = config.START_IMG
        TXT = f""" ú·¥á è {message.from_user.mention}
·¥õ ú…™s …™s {app.mention} ·¥Ä ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç Íú±·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢  ô·¥è·¥õ ·¥°…™·¥õ ú Íú±·¥è·¥ç·¥á ·¥Ä·¥°·¥áÍú±·¥è·¥ç·¥á Íú∞·¥á·¥Ä·¥õ·¥ú Ä·¥áÍú±. Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ…™…¥…¢ ·¥ò ü·¥Ä·¥õÍú∞·¥è Ä·¥çÍú±  ü…™·¥ã·¥á ** è·¥è·¥ú·¥õ·¥ú ô·¥á**, **·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç**, **Íú±·¥ò·¥è·¥õ…™Íú∞ è** ·¥á·¥õ·¥Ñ.

**·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ú·¥á ü·¥©  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü·¥è·¥° ·¥õ·¥è …¢·¥á·¥õ …™…¥“ì·¥è ·¥Ä ô·¥è·¥ú·¥õ ·¥ç è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös.**"""
        try:
            await message.reply_photo(
                photo=image,
                caption=TXT,
                reply_markup=InlineKeyboardMarkup(out),
            )
        except:
            await message.reply_text(
                text=TXT,
                reply_markup=InlineKeyboardMarkup(out),
            )
        if await is_on_off(2):
            sender_id = message.from_user.id
            sender_name = message.from_user.mention
            sender_uname = message.from_user.username
            return await app.send_message(
                config.LOG_GROUP_ID,
                f"{message.from_user.mention} ·¥ä·¥ús·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö  è·¥è·¥ú Ä  ô·¥è·¥õ.\n\n**·¥ús·¥á Ä …™·¥Ö:** `{sender_id}`\n**·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á:** @{sender_uname}",
            )
                
              
