from os import remove
from config import BANNED_USERS, SERVER_PLAYLIST_LIMIT
from pykeyboard import InlineKeyboard
from pyrogram import filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from Bgt.platforms import YouTubeAPI
from Bgt import app
from Bgt.utils.pastebin import Javabin
from Bgt.utils.stream.stream import stream
from Bgt.utils.inline.play import close_keyboard
from Bgt.utils.inline.playlist import botplaylist_markup, get_playlist_markup, warning_markup
from Bgt.utils.database import delete_playlist, get_playlist, get_playlist_names, save_playlist


__MODULE__ = "P ü·¥Ä è ü…™s·¥õ"
__HELP__ = """
‚ä± /playlist : ·¥Ñ ú·¥á·¥Ñ·¥ã  è·¥è·¥ú Ä s·¥Ä·¥†·¥á·¥Ö ·¥© ü·¥Ä è ü…™s·¥õ ·¥è…¥ s·¥á Ä·¥†·¥á Äs.

‚ä± /deleteplaylist : ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ä…¥ è s·¥Ä·¥†·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ã …™…¥  è·¥è·¥ú Ä ·¥© ü·¥Ä è ü…™s·¥õ.

‚ä± /play : s·¥õ·¥Ä Ä·¥õs ·¥© ü·¥Ä è…™…¥…¢ “ì Ä·¥è·¥ç  è·¥è·¥ú Ä s·¥Ä·¥†·¥á·¥Ö ·¥© ü·¥Ä è ü…™s·¥õ ·¥è…¥ s·¥á Ä·¥†·¥á Ä
"""


@app.on_message(filters.command(["playlist"]) & ~BANNED_USERS)
async def check_playlist(client, message: Message):
    try:
        await message.delete()
    except:
        pass
    _playlist = await get_playlist_names(message.from_user.id)
    if _playlist:
        get = await message.reply_text("…¢·¥á·¥õ·¥õ…™…¥…¢  è·¥è·¥ú Ä ·¥ò ü·¥Ä è ü…™s·¥õ ·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ !")
    else:
        return await message.reply_text(" è·¥è·¥ú  ú·¥Ä·¥†·¥á …¥·¥è ·¥ò ü·¥Ä è ü…™s·¥õ ·¥è…¥  ô·¥è·¥õ's s·¥á Ä·¥†·¥á Ä")
    msg = "“ì·¥á·¥õ·¥Ñ ú·¥á·¥Ö ·¥ò ü·¥Ä è ü…™s·¥õ:\n"
    count = 0
    for axen in _playlist:
        _note = await get_playlist(message.from_user.id, axen)
        title = _note["title"].title()
        msg += f"\n\n{count}- {title[:70]}\n"
        msg += "D·¥ú Ä·¥Ä·¥õ…™·¥è…¥ : {0} ·¥ç…™…¥s ".format(_note["duration"])
        count += 1
    link = await Javabin(msg)
    if link:
        await get.edit_text("[C ú·¥á·¥Ñ·¥ã·¥è·¥ú·¥õ W ú·¥è ü·¥á P ü·¥Ä è ü…™s·¥õ]({0})".format(link))
    else:
        ran_hash = f"\\files\Playlist{message.chat.id}{message.from_user.id}.txt"
        with open(ran_hash, "w") as pl:
            pl.write(msg)
        try:
            await message.reply_document(ran_hash, caption="“ì·¥á·¥õ·¥Ñ ú·¥á·¥Ö ·¥ò ü·¥Ä è ü…™s·¥õ:\n", file_name=ran_hash)
            await get.delete()
        except Exception as e:
            await get.edit_text("·¥Ä…¥ ·¥áx·¥Ñ·¥á·¥ò·¥õ…™·¥è…¥ ·¥è·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö !\n\n{0}".format(str(e)))
        finally:
            remove(ran_hash)


@app.on_message(filters.command(["deleteplaylist"]) & filters.group & ~BANNED_USERS)
async def del_group_message(client, message: Message):
    try:
        await message.delete()
    except:
        pass
    upl = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(text="·¥Ö·¥á ü·¥á·¥õ·¥á ·¥ò ü·¥Ä è ü…™s·¥õ", url=f"https://t.me/{app.username}?start=delplaylists")
            ]
        ]
    )
    await message.reply_text("·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç·¥á …™…¥ ·¥ò·¥ç “ì·¥è Ä ·¥Ö·¥á ü·¥á·¥õ…™·¥è…¥ ·¥è“ì ·¥ò ü·¥Ä è ü…™s·¥õs", reply_markup=upl)


async def get_keyboard(user_id):
    keyboard = InlineKeyboard(row_width=5)
    _playlist = await get_playlist_names(user_id)
    count = len(_playlist)
    for x in _playlist:
        _note = await get_playlist(user_id, x)
        title = _note["title"]
        title = title.title()
        keyboard.row(
            InlineKeyboardButton(text=title, callback_data=f"del_playlist {x}")
        )
    keyboard.row(
        InlineKeyboardButton(text="·¥Ö·¥á ü·¥á·¥õ·¥á ·¥° ú·¥è ü·¥á ·¥ò ü·¥Ä è ü…™s·¥õ", callback_data="delete_warning"),
        InlineKeyboardButton(text="·¥Ñ ü·¥ès·¥á", callback_data=f"close")
    )
    return keyboard, count


@app.on_message(filters.command(["deleteplaylist"]) & filters.private & ~BANNED_USERS)
async def del_plist_msg(client, message: Message):
    try:
        await message.delete()
    except:
        pass
    _playlist = await get_playlist_names(message.from_user.id)
    if _playlist:
        get = await message.reply_text("…¢·¥á·¥õ·¥õ…™…¥…¢  è·¥è·¥ú Ä ·¥ò ü·¥Ä è ü…™s·¥õ ·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ !")
    else:
        return await message.reply_text(" è·¥è·¥ú  ú·¥Ä·¥†·¥á …¥·¥è ·¥ò ü·¥Ä è ü…™s·¥õ ·¥è…¥  ô·¥è·¥õ's s·¥á Ä·¥†·¥á Ä")
    keyboard, count = await get_keyboard(message.from_user.id)
    await get.edit_text("**·¥õ Ä·¥Ä·¥Ñ·¥ãs …™…¥s…™·¥Ö·¥á ·¥ò ü·¥Ä è ü…™s·¥õ:** {0}\n\n·¥ò Ä·¥áss ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ä ·¥ò·¥Ä Ä·¥õ…™·¥Ñ·¥ú ü·¥Ä Ä ·¥õ Ä·¥Ä·¥Ñ·¥ã …™…¥  è·¥è·¥ú Ä ·¥ò ü·¥Ä è ü…™s·¥õ.\n\n**·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥° ú·¥è ü·¥á ·¥ò ü·¥Ä è ü…™s·¥õ:** ·¥ò Ä·¥áss ·¥Ö·¥á ü ·¥° ú·¥è ü·¥á ·¥ò ü·¥Ä è ü…™s·¥õ  ô·¥ú·¥õ·¥õ·¥è…¥.".format(count), reply_markup=keyboard)


@app.on_callback_query(filters.regex("play_playlist") & ~BANNED_USERS)
async def play_playlist(client, CallbackQuery):
    callback_data = CallbackQuery.data.strip()
    mode = callback_data.split(None, 1)[1]
    user_id = CallbackQuery.from_user.id
    _playlist = await get_playlist_names(user_id)
    if not _playlist:
        try:
            return await CallbackQuery.answer(" è·¥è·¥ú  ú·¥Ä·¥†·¥á …¥·¥è ·¥ò ü·¥Ä è ü…™s·¥õ ·¥è…¥  ô·¥è·¥õ's s·¥á Ä·¥†·¥á Ä", show_alert=True)
        except:
            return
    chat_id = CallbackQuery.message.chat.id
    user_name = CallbackQuery.from_user.first_name
    await CallbackQuery.message.delete()
    result = []
    try:
        await CallbackQuery.answer()
    except:
        pass
    video = True if mode == "v" else None
    mystic = await CallbackQuery.message.reply_text("üîÑ ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢ «´·¥ú·¥á Ä è ")
    for vidids in _playlist:
        result.append(vidids)
    try:
        await stream(
            mystic,
            user_id,
            result,
            chat_id,
            user_name,
            CallbackQuery.message.chat.id,
            video,
            streamtype="playlist",
        )
    except Exception as e:
        ex_type = type(e).__name__
        err = e if ex_type == "AssistantErr" else "s·¥è·¥ç·¥á **·¥áx·¥Ñ·¥á·¥ò·¥õ…™·¥è…¥ ·¥è·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö** ·¥° ú…™ ü·¥á ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢  è·¥è·¥ú Ä «´·¥ú·¥á Ä è\n\n·¥áx·¥Ñ·¥á·¥ò·¥õ…™·¥è…¥ ·¥õ è·¥ò·¥á:- `{0}`".format(ex_type)
        return await mystic.edit_text(err)
    return await mystic.delete()


@app.on_callback_query(filters.regex("add_playlist") & ~BANNED_USERS)
async def add_playlist(client, CallbackQuery):
    callback_data = CallbackQuery.data.strip()
    videoid = callback_data.split(None, 1)[1]
    user_id = CallbackQuery.from_user.id
    _check = await get_playlist(user_id, videoid)
    if _check:
        try:
            return await CallbackQuery.answer("·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥áx…™s·¥õs\n\n·¥õ ú…™s ·¥õ Ä·¥Ä·¥Ñ·¥ã ·¥áx…™s·¥õs …™…¥  è·¥è·¥ú Ä ·¥ò ü·¥Ä è ü…™s·¥õ.", show_alert=True)
        except:
            return
    _count = await get_playlist_names(user_id)
    count = len(_count)
    if count == SERVER_PLAYLIST_LIMIT:
        try:
            return await CallbackQuery.answer("s·¥è Ä Ä è !  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è  ú·¥Ä·¥†·¥á {0} ·¥ç·¥ús…™·¥Ñ …™…¥ ·¥Ä ·¥ò ü·¥Ä è ü…™s·¥õ .".format(SERVER_PLAYLIST_LIMIT), show_alert=True)
        except:
            return
    (
        title,
        duration_min,
        duration_sec,
        thumbnail,
        vidid,
    ) = await YouTube.details(videoid, True)
    title = (title[:50]).title()
    plist = {
        "videoid": vidid,
        "title": title,
        "duration": duration_min,
    }
    await save_playlist(user_id, videoid, plist)
    try:
        title = (title[:30]).title()
        return await CallbackQuery.message.reply_text(
            text=" s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥è ·¥© ü·¥Ä è ü…™s·¥õ.\n ‚îÇ\n ‚îîR·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö B è : {0}".format(CallbackQuery.from_user.mention),
            reply_markup=close_keyboard,
        )
    except:
        return


@app.on_callback_query(filters.regex("del_playlist") & ~BANNED_USERS)
async def del_plist(client, CallbackQuery):
    callback_data = CallbackQuery.data.strip()
    videoid = callback_data.split(None, 1)[1]
    user_id = CallbackQuery.from_user.id
    deleted = await delete_playlist(CallbackQuery.from_user.id, videoid)
    if deleted:
        try:
            await CallbackQuery.answer("s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö  è·¥è·¥ú Ä ·¥õ Ä·¥Ä·¥Ñ·¥ã", show_alert=True)
        except:
            pass
    else:
        try:
            return await CallbackQuery.answer("“ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á  è·¥è·¥ú Ä ·¥õ Ä·¥Ä·¥Ñ·¥ã", show_alert=True)
        except:
            return
    keyboard, count = await get_keyboard(user_id)
    return await CallbackQuery.edit_message_reply_markup(reply_markup=keyboard)


@app.on_callback_query(filters.regex("delete_whole_playlist") & ~BANNED_USERS)
async def del_whole_playlist(client, CallbackQuery):
    _playlist = await get_playlist_names(CallbackQuery.from_user.id)
    for x in _playlist:
        await delete_playlist(CallbackQuery.from_user.id, x)
    return await CallbackQuery.edit_message_text("·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö  è·¥è·¥ú Ä ·¥° ú·¥è ü·¥á ·¥ò ü·¥Ä è ü…™s·¥õs “ì Ä·¥è·¥ç ·¥õ ú·¥á s·¥á Ä·¥†·¥á Ä")


@app.on_callback_query(filters.regex("get_playlist_playmode") & ~BANNED_USERS)
async def get_playlist_playmode_(client, CallbackQuery):
    try:
        await CallbackQuery.answer()
    except:
        pass
    buttons = get_playlist_markup()
    return await CallbackQuery.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(buttons))


@app.on_callback_query(filters.regex("delete_warning") & ~BANNED_USERS)
async def delete_warning_message(client, CallbackQuery):
    try:
        await CallbackQuery.answer()
    except:
        pass
    upl = warning_markup()
    return await CallbackQuery.edit_message_text("**·¥Ä Ä·¥á  è·¥è·¥ú s·¥ú Ä·¥á  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á  è·¥è·¥ú Ä ·¥° ú·¥è ü·¥á ·¥ò ü·¥Ä è ü…™s·¥õ ?**\n\n è·¥è·¥ú' ü ü  ü·¥ès·¥õ  è·¥è·¥ú Ä ·¥ò ü·¥Ä è ü…™s·¥õ ·¥Ä…¥·¥Ö ·¥õ ú…™s ·¥Ñ·¥Ä…¥'·¥õ  ô·¥á  Ä·¥á·¥Ñ·¥è·¥†·¥á Ä·¥á·¥Ö  ü·¥Ä·¥õ·¥á Ä.", reply_markup=upl)


@app.on_callback_query(filters.regex("home_play") & ~BANNED_USERS)
async def home_play_(client, CallbackQuery):
    try:
        await CallbackQuery.answer()
    except:
        pass
    buttons = botplaylist_markup()
    return await CallbackQuery.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(buttons))


@app.on_callback_query(filters.regex("del_back_playlist") & ~BANNED_USERS)
async def del_back_playlist(client, CallbackQuery):
    user_id = CallbackQuery.from_user.id
    _playlist = await get_playlist_names(user_id)
    if _playlist:
        try:
            await CallbackQuery.answer("…¢·¥á·¥õ·¥õ…™…¥…¢  è·¥è·¥ú Ä ·¥ò ü·¥Ä è ü…™s·¥õ ·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ !", show_alert=True)
        except:
            pass
    else:
        try:
            return await CallbackQuery.answer(" è·¥è·¥ú  ú·¥Ä·¥†·¥á …¥·¥è ·¥ò ü·¥Ä è ü…™s·¥õ ·¥è…¥  ô·¥è·¥õ's s·¥á Ä·¥†·¥á Ä", show_alert=True)
        except:
            return
    keyboard, count = await get_keyboard(user_id)
    return await CallbackQuery.edit_message_text("**·¥õ Ä·¥Ä·¥Ñ·¥ãs …™…¥s…™·¥Ö·¥á ·¥ò ü·¥Ä è ü…™s·¥õ:** {0}\n\n·¥ò Ä·¥áss ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ä ·¥ò·¥Ä Ä·¥õ…™·¥Ñ·¥ú ü·¥Ä Ä ·¥õ Ä·¥Ä·¥Ñ·¥ã …™…¥  è·¥è·¥ú Ä ·¥ò ü·¥Ä è ü…™s·¥õ.\n\n**·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥° ú·¥è ü·¥á ·¥ò ü·¥Ä è ü…™s·¥õ:** ·¥ò Ä·¥áss ·¥Ö·¥á ü ·¥° ú·¥è ü·¥á ·¥ò ü·¥Ä è ü…™s·¥õ  ô·¥ú·¥õ·¥õ·¥è…¥.".format(count), reply_markup=keyboard)
